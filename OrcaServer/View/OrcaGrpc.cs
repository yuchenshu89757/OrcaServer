// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: orca.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2018 Xiaoman.com, Inc. All Rights Reserved
// @author chenyi (yuchenshu89757@163.com)
// @Last Modified: 2018-11-10 23:32:30
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Com.Xiaoman
{
    public static partial class gRPC
    {
        static readonly string __ServiceName = "com.xiaoman.gRPC";

        static readonly grpc::Marshaller<global::Com.Xiaoman.QueryAdvRequest> __Marshaller_com_xiaoman_QueryAdvRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Xiaoman.QueryAdvRequest.Parser.ParseFrom);
        static readonly grpc::Marshaller<global::Com.Xiaoman.QueryAdvResponse> __Marshaller_com_xiaoman_QueryAdvResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Xiaoman.QueryAdvResponse.Parser.ParseFrom);
        static readonly grpc::Marshaller<global::Com.Xiaoman.UpdateAdvRequest> __Marshaller_com_xiaoman_UpdateAdvRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Xiaoman.UpdateAdvRequest.Parser.ParseFrom);
        static readonly grpc::Marshaller<global::Com.Xiaoman.UpdateAdvResponse> __Marshaller_com_xiaoman_UpdateAdvResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Xiaoman.UpdateAdvResponse.Parser.ParseFrom);
        static readonly grpc::Marshaller<global::Com.Xiaoman.InsertLogRequest> __Marshaller_com_xiaoman_InsertLogRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Xiaoman.InsertLogRequest.Parser.ParseFrom);
        static readonly grpc::Marshaller<global::Com.Xiaoman.InsertLogResponse> __Marshaller_com_xiaoman_InsertLogResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Xiaoman.InsertLogResponse.Parser.ParseFrom);
        static readonly grpc::Marshaller<global::Com.Xiaoman.InsertScreenhotRequest> __Marshaller_com_xiaoman_InsertScreenhotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Xiaoman.InsertScreenhotRequest.Parser.ParseFrom);
        static readonly grpc::Marshaller<global::Com.Xiaoman.InsertScreenshotResponse> __Marshaller_com_xiaoman_InsertScreenshotResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Xiaoman.InsertScreenshotResponse.Parser.ParseFrom);

        static readonly grpc::Method<global::Com.Xiaoman.QueryAdvRequest, global::Com.Xiaoman.QueryAdvResponse> __Method_QueryAdv = new grpc::Method<global::Com.Xiaoman.QueryAdvRequest, global::Com.Xiaoman.QueryAdvResponse>(
            grpc::MethodType.ServerStreaming,
            __ServiceName,
            "QueryAdv",
            __Marshaller_com_xiaoman_QueryAdvRequest,
            __Marshaller_com_xiaoman_QueryAdvResponse);

        static readonly grpc::Method<global::Com.Xiaoman.UpdateAdvRequest, global::Com.Xiaoman.UpdateAdvResponse> __Method_UpdateAdv = new grpc::Method<global::Com.Xiaoman.UpdateAdvRequest, global::Com.Xiaoman.UpdateAdvResponse>(
            grpc::MethodType.Unary,
            __ServiceName,
            "UpdateAdv",
            __Marshaller_com_xiaoman_UpdateAdvRequest,
            __Marshaller_com_xiaoman_UpdateAdvResponse);

        static readonly grpc::Method<global::Com.Xiaoman.InsertLogRequest, global::Com.Xiaoman.InsertLogResponse> __Method_InsertLog = new grpc::Method<global::Com.Xiaoman.InsertLogRequest, global::Com.Xiaoman.InsertLogResponse>(
            grpc::MethodType.Unary,
            __ServiceName,
            "InsertLog",
            __Marshaller_com_xiaoman_InsertLogRequest,
            __Marshaller_com_xiaoman_InsertLogResponse);

        static readonly grpc::Method<global::Com.Xiaoman.InsertScreenhotRequest, global::Com.Xiaoman.InsertScreenshotResponse> __Method_InsertScreenhot = new grpc::Method<global::Com.Xiaoman.InsertScreenhotRequest, global::Com.Xiaoman.InsertScreenshotResponse>(
            grpc::MethodType.Unary,
            __ServiceName,
            "InsertScreenhot",
            __Marshaller_com_xiaoman_InsertScreenhotRequest,
            __Marshaller_com_xiaoman_InsertScreenshotResponse);

        /// <summary>Service descriptor</summary>
        public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
        {
            get { return global::Com.Xiaoman.OrcaReflection.Descriptor.Services[0]; }
        }

        /// <summary>Base class for server-side implementations of gRPC</summary>
        public abstract partial class gRPCBase
        {
            public virtual global::System.Threading.Tasks.Task QueryAdvAsync(global::Com.Xiaoman.QueryAdvRequest request, grpc::IServerStreamWriter<global::Com.Xiaoman.QueryAdvResponse> responseStream, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

            public virtual global::System.Threading.Tasks.Task<global::Com.Xiaoman.UpdateAdvResponse> UpdateAdv(global::Com.Xiaoman.UpdateAdvRequest request, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

            public virtual global::System.Threading.Tasks.Task<global::Com.Xiaoman.InsertLogResponse> InsertLog(global::Com.Xiaoman.InsertLogRequest request, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

            public virtual global::System.Threading.Tasks.Task<global::Com.Xiaoman.InsertScreenshotResponse> InsertScreenhot(global::Com.Xiaoman.InsertScreenhotRequest request, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

        }

        /// <summary>Client for gRPC</summary>
        public partial class gRPCClient : grpc::ClientBase<gRPCClient>
        {
            /// <summary>Creates a new client for gRPC</summary>
            /// <param name="channel">The channel to use to make remote calls.</param>
            public gRPCClient(grpc::Channel channel) : base(channel)
            {
            }
            /// <summary>Creates a new client for gRPC that uses a custom <c>CallInvoker</c>.</summary>
            /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
            public gRPCClient(grpc::CallInvoker callInvoker) : base(callInvoker)
            {
            }
            /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
            protected gRPCClient() : base()
            {
            }
            /// <summary>Protected constructor to allow creation of configured clients.</summary>
            /// <param name="configuration">The client configuration.</param>
            protected gRPCClient(ClientBaseConfiguration configuration) : base(configuration)
            {
            }

            public virtual grpc::AsyncServerStreamingCall<global::Com.Xiaoman.QueryAdvResponse> QueryAdv(global::Com.Xiaoman.QueryAdvRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return QueryAdv(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual grpc::AsyncServerStreamingCall<global::Com.Xiaoman.QueryAdvResponse> QueryAdv(global::Com.Xiaoman.QueryAdvRequest request, grpc::CallOptions options)
            {
                return CallInvoker.AsyncServerStreamingCall(__Method_QueryAdv, null, options, request);
            }
            public virtual global::Com.Xiaoman.UpdateAdvResponse UpdateAdv(global::Com.Xiaoman.UpdateAdvRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return UpdateAdv(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual global::Com.Xiaoman.UpdateAdvResponse UpdateAdv(global::Com.Xiaoman.UpdateAdvRequest request, grpc::CallOptions options)
            {
                return CallInvoker.BlockingUnaryCall(__Method_UpdateAdv, null, options, request);
            }
            public virtual grpc::AsyncUnaryCall<global::Com.Xiaoman.UpdateAdvResponse> UpdateAdvAsync(global::Com.Xiaoman.UpdateAdvRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return UpdateAdvAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual grpc::AsyncUnaryCall<global::Com.Xiaoman.UpdateAdvResponse> UpdateAdvAsync(global::Com.Xiaoman.UpdateAdvRequest request, grpc::CallOptions options)
            {
                return CallInvoker.AsyncUnaryCall(__Method_UpdateAdv, null, options, request);
            }
            public virtual global::Com.Xiaoman.InsertLogResponse InsertLog(global::Com.Xiaoman.InsertLogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return InsertLog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual global::Com.Xiaoman.InsertLogResponse InsertLog(global::Com.Xiaoman.InsertLogRequest request, grpc::CallOptions options)
            {
                return CallInvoker.BlockingUnaryCall(__Method_InsertLog, null, options, request);
            }
            public virtual grpc::AsyncUnaryCall<global::Com.Xiaoman.InsertLogResponse> InsertLogAsync(global::Com.Xiaoman.InsertLogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return InsertLogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual grpc::AsyncUnaryCall<global::Com.Xiaoman.InsertLogResponse> InsertLogAsync(global::Com.Xiaoman.InsertLogRequest request, grpc::CallOptions options)
            {
                return CallInvoker.AsyncUnaryCall(__Method_InsertLog, null, options, request);
            }
            public virtual global::Com.Xiaoman.InsertScreenshotResponse InsertScreenhot(global::Com.Xiaoman.InsertScreenhotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return InsertScreenhot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual global::Com.Xiaoman.InsertScreenshotResponse InsertScreenhot(global::Com.Xiaoman.InsertScreenhotRequest request, grpc::CallOptions options)
            {
                return CallInvoker.BlockingUnaryCall(__Method_InsertScreenhot, null, options, request);
            }
            public virtual grpc::AsyncUnaryCall<global::Com.Xiaoman.InsertScreenshotResponse> InsertScreenhotAsync(global::Com.Xiaoman.InsertScreenhotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return InsertScreenhotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual grpc::AsyncUnaryCall<global::Com.Xiaoman.InsertScreenshotResponse> InsertScreenhotAsync(global::Com.Xiaoman.InsertScreenhotRequest request, grpc::CallOptions options)
            {
                return CallInvoker.AsyncUnaryCall(__Method_InsertScreenhot, null, options, request);
            }
            /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
            protected override gRPCClient NewInstance(ClientBaseConfiguration configuration)
            {
                return new gRPCClient(configuration);
            }
        }

        /// <summary>Creates service definition that can be registered with a server</summary>
        /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        public static grpc::ServerServiceDefinition BindService(gRPCBase serviceImpl)
        {
            return grpc::ServerServiceDefinition.CreateBuilder()
                .AddMethod(__Method_QueryAdv, serviceImpl.QueryAdvAsync)
                .AddMethod(__Method_UpdateAdv, serviceImpl.UpdateAdv)
                .AddMethod(__Method_InsertLog, serviceImpl.InsertLog)
                .AddMethod(__Method_InsertScreenhot, serviceImpl.InsertScreenhot).Build();
        }

    }
}
#endregion
